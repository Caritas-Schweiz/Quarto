---
title: "Falldaten Übersicht"
execute:
  echo: false
jupyter: python3
---

Verteilung der Beratungstypen.

```{python}
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

data = pd.read_csv("Falldaten_CaritasbB.csv", sep=';')  # Use semicolon or another character if you suspect a different delimiter

# Pie chart for the distribution of event types
event_types_data = data['Ereignis_EreignisartID'].value_counts().reset_index()
event_types_data.columns = ['Event Type', 'Count']

fig_event_types = px.pie(event_types_data, values='Count', names='Event Type', title='Distribution of type of contact ')
fig_event_types.show()
```

Anzahl Fälle gruppiert nach Beratungsthema und Jahr.

```{python}
import numpy as np
import pandas as pd
import plotly.express as px

case_data = pd.read_csv('Falldaten_CaritasbB.csv', delimiter=';')

case_data['Datum_Leistung'] = pd.to_datetime(case_data['Datum_Leistung'], errors='coerce')
case_data['Datum_Registrierung_Client'] = pd.to_datetime(case_data['Datum_Registrierung_Client'], errors='coerce')

case_data['Leistung_Year'] = case_data['Datum_Leistung'].dt.year
case_data['Registrierung'] = case_data['Datum_Registrierung_Client'].dt.year

# Aggregate the counts of each category by year
hauptart_category_counts = case_data[case_data['Leistung_Year'].isin([2022, 2023, 2024])] \
                    .groupby(['Leistung_Year', 'Hauptart']).size() \
                    .reset_index(name='Counts')

# Initialize a figure
hauptart_fig = go.Figure()

# Retrieve unique years and categories
hauptart_years = sorted(hauptart_category_counts['Leistung_Year'].unique())
hauptart_categories = hauptart_category_counts['Hauptart'].unique()

# Create a bar for each year
for year in hauptart_years:
    filtered_data = hauptart_category_counts[hauptart_category_counts['Leistung_Year'] == year]
    hauptart_fig.add_trace(go.Bar(
        x=filtered_data['Hauptart'],
        y=filtered_data['Counts'],
        name=str(year)  # Name the bars as per the year
    ))

# Update the layout for grouped bars
hauptart_fig.update_layout(
    barmode='group',  # This makes bars appear next to each other instead of stacking
    title='Category Distribution by Year',
    xaxis_title='Category',
    yaxis_title='Count',
    legend_title='Year',
    plot_bgcolor='white',
    legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="right",
        x=0.99
    )
)

# Show the plot
hauptart_fig.show()
```
